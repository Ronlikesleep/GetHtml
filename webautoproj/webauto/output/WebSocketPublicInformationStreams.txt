WebSocket Public Information Streams | Aboard Docs Products The Exchange Aboard Asset Management ðŸ“–Tokenomics For Beginner Video Tutorials Asset Management Tutorials For Fund Managers For Investors Financial Terms What are Futures and Perpetual Futures? Why Indices and Index Futures Matter? Order Book and Spread Explained What are Market Makers and Market Takers? Risk Management Avoid Getting Rekt How to Hedge your ANC Principal when participating in liquidity mining on Anchor? Trading Understanding Candlestick Charts How to Read Support and Resistance Market Order vs. Limit Order: When to Use Which? For developer API General Info Public Data Trades Endpoints Account Endpoints Market Data Endpoints WebSocket Public Information Streams WebSocket Private Information Streams Signature Operation GitHub Implementation Perpetuals Futures Expected Changes in Accounts Multi-position liquidation price calculation Multi-positions bankruptcy price calculation Funding Calculation Indices Aboard DeFi-20 Index Methodology Price Feeds Fund Terms Fees Social Media Powered by GitBook WebSocket Format Path: /public Method: WebSocket Description: WebSocket format Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array (List of subscribed channels)
   â”œâ”€ channel: String
   â””â”€ symbol: String Response: Copy â”œâ”€ event: String  (subscribe, unsubscribe)
â”œâ”€ channel: String
â”œâ”€ symbol: String
â”œâ”€ code: Number
â””â”€ msg: String Example: Request: Copy {
  "op": "",
  "args": [
    {
      "channel": "",
      "symbol": ""
    }
  ]
} Response: Copy {
  "event": "",
  "channel": "",
  "symbol": ""
  "code": 0,
  "msg": ""
} WebSocket Connect Path: /public Method: WebSocket Description: When the user's websocket client connects to the websocket server, the server will send a 'ping' message to it regularly (currently set to 10 seconds). When the user's websocket client receives this heartbeat message, it should return a 'pong' message. When the websocket server sends 'ping' messages for three consecutive times but does not receive any 'pong' messages, the server will actively disconnect from this client. When the websocket client does not receive the 'ping' message from the server for more than 30 seconds, it is considered that it is disconnected from the server and needs to be reconnected. Parameters: Copy â””â”€ ping Response: Copy â””â”€ pong All Contracts Simplify Tickers Channel Path: /public Method: WebSocket Description: Websocket channel to subscribe simplify ticker of all contracts Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array (List of subscribed channels)
   â””â”€ channel: String  (tickers: All contracts tickers) Response: Copy â”œâ”€ channel: String
â””â”€ data: Array
   â”œâ”€ symbol: String
   â”œâ”€ lastPrice: String
   â””â”€ priceChangePercent: String  (Percentage of 24-hour price change) Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "tickers"
    }
  ]
} Response: Copy {
  "channel": "tickers"
  "data": [
    {
      "symbol": "ETH-USDC",
      "lastPrice": "4.00000200",
      "priceChangePercent": "-95.960"
    }
  ]
} Single Contract Ticker Channel Path: /public Method: WebSocket Description: Websocket channel to subscribe ticker Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array
   â”œâ”€ channel: String  (ticker: Single Contract Ticker)
   â””â”€ symbol: String Response: Copy â”œâ”€ channel: String
â”œâ”€ symbol: String
â””â”€ data: Object
   â”œâ”€ symbol: String
   â”œâ”€ priceChange: String  (24-hour price change)
   â”œâ”€ priceChangePercent: String  (Percentage of 24-hour price change)
   â”œâ”€ lastPrice: String  (Last trades price)
   â”œâ”€ lastQty: String  (Last trades amount)
   â”œâ”€ openPrice: String  (Price of the first trades within 24 hours)
   â”œâ”€ highPrice: String  (24-hour maximum price)
   â”œâ”€ lowPrice: String  (24-hour lowest price)
   â”œâ”€ volume: String  (24-hour trades quantity)
   â”œâ”€ quoteVolume: String  (24-hour trades amount)
   â””â”€ count: Number  (24-hour trades count) Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "ticker",
      "symbol": "ETH-USDC"
    }
  ]
} Response: Copy {
  "channel": "ticker",
  "symbol": "ETH-USDC"
  "data": {
    "symbol": "ETH-USDC",
    "priceChange": "-94.99999800",
    "priceChangePercent": "-95.960",
    "lastPrice": "4.00000200",
    "lastQty": "200.00000000",
    "openPrice": "99.00000000",
    "highPrice": "100.00000000",
    "lowPrice": "0.10000000",
    "volume": "8913.30000000",
    "quoteVolume": "15.30000000",
    "count": 76
  }
} Order Book Channel Path: /public Method: WebSocket Description: Channel to subscribe order book update Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array (List of subscribed channels)
   â”œâ”€ channel: String  (depth<levels>: levels mean depth levels, Optional 5/10/20; depth5 for 5 depth levels)
   â””â”€ symbol: String Response: Copy â”œâ”€ channel: String
â”œâ”€ symbol: String
â”œâ”€ action: String  (Push data action, incremental data or full snapshot. snapshot: full update: incremental)
â””â”€ data: Object
   â”œâ”€ bids: Array (Buy)
   â”‚  â”œâ”€ 0: String  (price, 1st bit of array)
   â”‚  â””â”€ 1: String  (quantity, 2nd bit of array)
   â”œâ”€ asks: Array (Sell)
   â”‚  â”œâ”€ 0: String  (price, 1st bit of array)
   â”‚  â””â”€ 1: String  (quantity, 2nd bit of array)
   â””â”€ time: Number Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "depth<levels>",
      "symbol": "ETH-USDC"
    }
  ]
} Response: Copy {
  "channel": "depth5",
  "symbol": "ETH-USDC"
  "action": "snapshot",
  "data": {
    "bids": [
      {
        "0": "4.00000000",
        "1": "431.00000000"
      }
    ],
    "asks": [
      {
        "0": "4.00000200",
        "1": "12.00000000"
      }
    ],
    "time": 1569514978020
  }
} Latest Trades Channel Path: /public Method: WebSocket Description: Channel to subscribe latest trades update Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array
    â”œâ”€ channel: String (trade:trades) 
    â””â”€ symbol: String Response: Copy â”œâ”€ channel: String
â”œâ”€ symbol: String
â””â”€ data: Object
   â”œâ”€ symbol: String
   â”œâ”€ id: String  (Trades id)
   â”œâ”€ price: String  (Trades price)
   â”œâ”€ qty: String  (Trades quantity)
   â”œâ”€ time: Number  (Trades time)
   â”œâ”€ side: String
   â””â”€ maker: Boolean  (if maker) Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "trade",
      "symbol": "ETH-USDC"
    }
  ]
} Response: Copy {
  "channel": "trade",
  "symbol": "ETH-USDC"
  "data": {
    "symbol": "ETH-USDC",
    "id": "28457",
    "price": "4.00000100",
    "qty": "12.00000000",
    "time": 1499865549590,
    "side": "SELL",
    "maker": false
  }
} Kline Channel Path: /public Method: WebSocket Description: Channel to subscribe kline update Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array
   â”œâ”€ channel: String  (channel: kline1m,kline5m,kline15m,kline30m,kline1h,kline4h,kline1d)
   â””â”€ symbol: String Response: Copy â”œâ”€ channel: String
â”œâ”€ symbol: String
â””â”€ data: Object
   â”œâ”€ 0: Number  (Start time)
   â”œâ”€ 1: String  (Open price)
   â”œâ”€ 2: String  (highest price)
   â”œâ”€ 3: String  (Lowest price)
   â”œâ”€ 4: String  (Close price)
   â”œâ”€ 5: String  (Trades quantity)
   â”œâ”€ 6: String  (Trades amount)
   â””â”€ 7: Number  (Trades count) Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "kline15m",
      "symbol": "ETH-USDC"
    }
  ]
} Response: Copy {
  "channel": "kline15m",
  "symbol": "ETH-USDC"
  "data": {
    "0": 1499040000000,
    "1": "0.01634790",
    "2": "0.80000000",
    "3": "0.01575800",
    "4": "0.01577100",
    "5": "148976.11427815",
    "6": "2434.19055334",
    "7": 308
  }
} Index Tickers Channel Path: /public Method: WebSocket Description: Channel to subscribe index ticker update Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array
    â”œâ”€ channel: String (index:Index price) 
    â””â”€ symbol: String Response: Copy â”œâ”€ channel: String
â”œâ”€ symbol: String
â””â”€ data: Object
   â”œâ”€ symbol: String
   â”œâ”€ indexPrice: String
   â””â”€ time: Number Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "index",
      "symbol": "ETH-USDC"
    }
  ]
}
 Response: Copy {
  "channel": "index",
  "symbol": "ETH-USDC"
  "data": {
    "symbol": "ETH-USDC",
    "indexPrice": "28457",
    "time": 1499865549590
  }
} Oracle Price Channel Path: /public Method: WebSocket Description: Channel to subscribe oracle price update Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array
   â”œâ”€ channel: String  (oracle: Oracle price)
   â””â”€ symbol: String Response: Copy â”œâ”€ channel: String
â”œâ”€ symbol: String
â””â”€ data: Object
   â”œâ”€ symbol: String
   â”œâ”€ oraclePrice: String
   â””â”€ time: Number  (Effective time) Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "oracle",
      "symbol": "ETH-USDC"
    }
  ]
} Response: Copy {
  "channel": "oracle",
  "symbol": "ETH-USDC"
  "data": {
    "symbol": "ETH-USDC",
    "oraclePrice": "28457",
    "time": 1499865549590
  }
} Funding Rate Channel Path: /public Method: WebSocket Description: Channel to subscribe funding rate Parameters: Copy â”œâ”€ op: String  (Operation, subscribe unsubscribe)
â””â”€ args: Array
    â”œâ”€ channel: String (funding:Funding rate) 
    â””â”€ symbol: String Response: Copy â”œâ”€ channel: String
â”œâ”€ symbol: String
â””â”€ data: Object
   â”œâ”€ symbol: String
   â”œâ”€ fundingRate: String
   â””â”€ time: Number Example: Request: Copy {
  "op": "subscribe",
  "args": [
    {
      "channel": "funding",
      "symbol": "ETH-USDC"
    }
  ]
} Response: Copy {
  "channel": "funding",
  "symbol": "ETH-USDC"
  "data": {
    "symbol": "ETH-USDC",
    "fundingRate": "0.0008",
    "time": 1499865549590
  }
} PreviousMarket Data Endpoints NextWebSocket Private Information Streams Last updated 1 year ago On this page WebSocket Format WebSocket Connect All Contracts Simplify Tickers Channel Single Contract Ticker Channel Order Book Channel Latest Trades Channel Kline Channel Index Tickers Channel Oracle Price Channel Funding Rate Channel